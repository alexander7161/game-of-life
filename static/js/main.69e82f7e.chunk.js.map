{"version":3,"sources":["types/game.ts","store/game/selectors.ts","components/Cell/styles.ts","components/Cell/Cell.tsx","components/Cell/CellWithData.tsx","components/Board/styles.ts","components/Board/Board.tsx","store/game/logic/utils/getRandomStatus.ts","store/game/logic/create/createCell.ts","store/game/logic/create/createBoard.ts","store/game/logic/advance/getLiveNeighbours.ts","store/game/logic/advance/advanceBoard.ts","store/game/logic/advance/advanceCell.ts","store/game/index.ts","App.tsx","store/reducers.ts","store/game/sagas/timer.ts","store/game/sagas/index.ts","store/sagas.ts","store/store.ts","index.tsx"],"names":["Status","selectGameBoard","state","game","board","selectCellStatus","x","y","createSelector","selectCell","status","selectGameBoardSize","size","selectGameInterval","interval","CellContainer","styled","div","Alive","css","Dead","Cell","CellWithData","useSelector","BoardContainer","RowContainer","Board","Array","fill","map","_","key","getRandomStatus","statuses","Math","floor","random","length","createCell","Empty","createBoard","CONSTANTS","getNeighbourCoord","x1","max","newValue","getLiveNeighbours","reduce","total","y1","Number","advanceBoard","cells","c","cell","liveNeighbours","advanceCell","initialState","active","year","gameSlice","createSlice","name","reducers","startGame","pauseGame","resetGame","payload","newSize","advanceGame","actions","reducer","App","dispatch","useDispatch","onClick","combineReducers","gameReducer","gameTimer","timer","eventChannel","emitter","timerID","setInterval","clearInterval","select","call","chan","take","put","close","fork","timerTask","cancel","TimerSagas","GameSagas","sagaMiddleware","createSagaMiddleware","store","configureStore","middleware","getDefaultMiddleware","concat","devTools","process","run","sagas","render","document","getElementById"],"mappings":"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","file":"static/js/main.69e82f7e.chunk.js","sourcesContent":["export type Board = Cell[][];\n\nexport enum Status {\n  Empty,\n  Alive,\n  Dead,\n}\n\nexport type Cell = {\n  status: Status;\n  x: number;\n  y: number;\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { AppState } from \"store/store\";\n\nexport const selectGameBoard = (state: AppState) => state.game.board;\n\nexport const selectCell = (x: number, y: number) =>\n  createSelector(selectGameBoard, (board) => board[x][y]);\n\nexport const selectCellStatus = (x: number, y: number) => (state: AppState) =>\n  selectCell(x, y)(state).status;\n\nexport const selectGameActive = (state: AppState) => state.game.active;\n\nexport const selectGameBoardSize = (state: AppState) => state.game.size;\n\nexport const selectGameInterval = (state: AppState) => state.game.interval;\n","import styled, { css } from \"styled-components\";\nimport { Status } from \"types/game\";\n\nexport const CellContainer = styled.div<{ status: Status }>`\n  height: 10px;\n  width: 10px;\n  ${({ status }) => {\n    switch (status) {\n      case Status.Alive:\n        return css`\n          background-color: green;\n        `;\n      case Status.Dead:\n      default:\n        return css`\n          background-color: white;\n        `;\n    }\n  }}\n`;\n","import React from \"react\";\nimport { CellContainer } from \"./styles\";\nimport { CellProps } from \"./types\";\n\nconst Cell = ({ status }: CellProps) => {\n  return <CellContainer status={status} />;\n};\n\nexport default Cell;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectCellStatus } from \"store/game/selectors\";\nimport { CellWithDataProps } from \"./types\";\nimport Cell from \"./Cell\";\n\nconst CellWithData = ({ x, y }: CellWithDataProps) => {\n  const status = useSelector(selectCellStatus(x, y));\n  return <Cell status={status} />;\n};\n\nexport default CellWithData;\n","import styled from \"styled-components\";\n\nexport const BoardContainer = styled.div``;\n\nexport const RowContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n","import Cell from \"components/Cell\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectGameBoardSize } from \"store/game/selectors\";\nimport { BoardContainer, RowContainer } from \"./styles\";\n\nconst Board = () => {\n  const size = useSelector(selectGameBoardSize);\n\n  return (\n    <BoardContainer>\n      {new Array(size).fill(null).map((_, x) => (\n        <RowContainer key={x}>\n          {new Array(size).fill(null).map((_, y) => (\n            <Cell key={`${x}${y}`} x={x} y={y} />\n          ))}\n        </RowContainer>\n      ))}\n    </BoardContainer>\n  );\n};\n\nexport default Board;\n","import { Status } from \"types/game\";\n\nconst getRandomStatus = (statuses: Status[]) => {\n  return statuses[Math.floor(Math.random() * statuses.length)] as Status;\n};\n\nexport default getRandomStatus;\n","import { Status, Cell } from \"types/game\";\n\nexport const createCell = ({\n  x,\n  y,\n  status = Status.Empty,\n}: {\n  x: number;\n  y: number;\n  status?: Status;\n}): Cell => ({\n  x,\n  y,\n  status,\n});\n","import { Status } from \"types/game\";\nimport getRandomStatus from \"../utils/getRandomStatus\";\nimport { createCell } from \"./createCell\";\n\nexport const createBoard = (size = 8, status?: Status) =>\n  new Array(size)\n    .fill(null)\n    .map((_, x) =>\n      new Array(size)\n        .fill(null)\n        .map((_, y) =>\n          createCell({\n            x,\n            y,\n            status: status ?? getRandomStatus([Status.Alive, Status.Empty]),\n          })\n        )\n    );\n","import { Cell, Status, Board } from \"types/game\";\n\nconst CONSTANTS = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, -1],\n  [0, 1],\n  [1, 0],\n  [1, 1],\n  [1, -1],\n];\n\nconst isAlive = (cell: Cell): boolean => cell.status === Status.Alive;\n\nconst getNeighbourCoord = (x: number, x1: number, max: number) => {\n  const newValue = x + x1;\n  switch (true) {\n    case newValue === max:\n      return 0;\n    case newValue < 0:\n      return max - 1;\n    default:\n      return newValue;\n  }\n};\n\nexport const getLiveNeighbours = ({ x, y }: Cell, board: Board): number =>\n  CONSTANTS.reduce((total, [x1, y1]) => {\n    const max = board.length;\n    return (\n      total +\n      Number(\n        isAlive(\n          board[getNeighbourCoord(x, x1, max)][getNeighbourCoord(y, y1, max)]\n        )\n      )\n    );\n  }, 0);\n","import { Board } from \"types/game\";\nimport { advanceCell } from \"./advanceCell\";\n\nexport const advanceBoard = (board: Board): Board =>\n  board.map((cells) => cells.map((c) => advanceCell(c, board)));\n","import { Cell, Status, Board } from \"types/game\";\nimport { createCell } from \"../create/createCell\";\nimport { getLiveNeighbours } from \"./getLiveNeighbours\";\n\nexport const advanceCell = (cell: Cell, board: Board): Cell => {\n  const liveNeighbours = getLiveNeighbours(cell, board);\n  const { x, y } = cell;\n  if (cell.status === Status.Alive) {\n    switch (true) {\n      case liveNeighbours < 2:\n        return createCell({ x, y, status: Status.Dead });\n      case liveNeighbours > 3:\n        return createCell({ x, y, status: Status.Dead });\n      default:\n        return createCell({ ...cell });\n    }\n  } else {\n    switch (true) {\n      case liveNeighbours === 3:\n        return createCell({ x, y, status: Status.Alive });\n      default:\n        return createCell({ ...cell });\n    }\n  }\n};\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { advanceBoard, createBoard } from \"./logic\";\nimport { GameState } from \"./types\";\n\nconst INITIAL_SIZE = 75;\n\nexport const initialState: GameState = {\n  active: false,\n  board: createBoard(INITIAL_SIZE),\n  year: 0,\n  size: INITIAL_SIZE,\n  interval: 1,\n};\n\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState,\n  reducers: {\n    startGame(state) {\n      state.active = true;\n    },\n    pauseGame(state) {\n      state.active = false;\n    },\n    resetGame(state, { payload }: PayloadAction<{ size: number } | undefined>) {\n      const newSize = payload?.size ?? state.size;\n      state.board = createBoard(newSize);\n      state.size = newSize;\n    },\n    advanceGame(state) {\n      const { board } = state;\n      state.board = advanceBoard(board);\n      state.year++;\n    },\n  },\n});\nconst { actions, reducer } = gameSlice;\nexport const { advanceGame, startGame, pauseGame } = actions;\nexport default reducer;\n","import Board from \"components/Board\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { pauseGame, startGame } from \"store/game\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <div onClick={() => dispatch(startGame())}>start</div>\n      <div onClick={() => dispatch(pauseGame())}>pause</div>\n\n      <Board />\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport gameReducer from \"./game\";\n\nconst reducer = combineReducers({\n  game: gameReducer,\n});\n\nexport type AppState = ReturnType<typeof reducer>;\n\nexport default reducer;\n","import { eventChannel } from \"redux-saga\";\nimport { call, cancel, fork, put, select, take } from \"redux-saga/effects\";\nimport { advanceGame, startGame, pauseGame } from \"..\";\nimport { selectGameInterval } from \"../selectors\";\n\nfunction timer(interval: number) {\n  return eventChannel((emitter) => {\n    const timerID = setInterval(() => emitter(\"\"), interval);\n    return () => {\n      clearInterval(timerID);\n    };\n  });\n}\n\nexport function* gameTimer() {\n  const interval = yield select(selectGameInterval);\n  const chan = yield call(timer, interval);\n  try {\n    while (true) {\n      yield take(chan);\n      yield put(advanceGame());\n    }\n  } finally {\n    chan.close();\n  }\n}\n\nexport default function* () {\n  while (yield take(startGame)) {\n    const timerTask = yield fork(gameTimer);\n    yield take(pauseGame);\n    yield cancel(timerTask);\n  }\n}\n","import { fork } from \"redux-saga/effects\";\nimport TimerSagas from \"./timer\";\n\nexport default function* () {\n  yield fork(TimerSagas);\n}\n","import { fork } from \"redux-saga/effects\";\nimport GameSagas from \"./game/sagas\";\n\nexport default function* () {\n  yield fork(GameSagas);\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer, { AppState } from \"./reducers\";\nimport sagas from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware().concat(sagaMiddleware),\n  devTools: process.env.NODE_ENV !== \"production\",\n});\n\nsagaMiddleware.run(sagas);\n\nexport type { AppState };\nexport default store;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport \"normalize.css\";\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}