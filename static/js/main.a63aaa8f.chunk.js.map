{"version":3,"sources":["types/game.ts","store/game/logic/utils/getRandomStatus.ts","store/game/logic/create/createCell.ts","store/game/logic/advance/getLiveNeighbours.ts","store/game/logic/advance/advanceBoard.ts","store/game/logic/advance/advanceCell.ts","store/game/index.ts","store/game/logic/create/createBoard.ts","store/game/selectors.ts","App.tsx","store/reducers.ts","store/store.ts","index.tsx"],"names":["Status","getRandomStatus","statusValues","Object","keys","Math","floor","random","length","createCell","x","y","status","Empty","CONSTANTS","getNeighbourCoord","x1","max","newValue","getLiveNeighbours","board","reduce","total","y1","Number","Alive","advanceBoard","map","cells","c","cell","liveNeighbours","Dead","advanceCell","initialState","size","Array","fill","_","createBoard","year","gameSlice","createSlice","name","reducers","advanceGame","actions","reducer","gameBoardSelector","state","game","App","dispatch","useDispatch","useSelector","console","table","r","onClick","combineReducers","gameReducer","store","configureStore","devTools","process","render","document","getElementById"],"mappings":"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","file":"static/js/main.a63aaa8f.chunk.js","sourcesContent":["export type Board = Cell[][];\n\nexport enum Status {\n  Empty,\n  Alive,\n  Dead,\n}\n\nexport type Cell = {\n  status: Status;\n  x: number;\n  y: number;\n};\n","import { Status } from \"types/game\";\n\nconst getRandomStatus = () => {\n  const statusValues = Object.keys(Status);\n  const randomIndex = Math.floor(Math.random() * statusValues.length);\n  return randomIndex as Status;\n};\n\nexport default getRandomStatus;\n","import { Status, Cell } from \"types/game\";\n\nexport const createCell = ({\n  x,\n  y,\n  status = Status.Empty,\n}: {\n  x: number;\n  y: number;\n  status?: Status;\n}): Cell => ({\n  x,\n  y,\n  status,\n});\n","import { Cell, Status, Board } from \"types/game\";\n\nconst CONSTANTS = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, -1],\n  [0, 1],\n  [1, 0],\n  [1, 1],\n  [1, -1],\n];\n\nconst isAlive = (cell: Cell): boolean => cell.status === Status.Alive;\n\nconst getNeighbourCoord = (x: number, x1: number, max: number) => {\n  const newValue = x + x1;\n  switch (true) {\n    case newValue === max:\n      return 0;\n    case newValue < 0:\n      return max - 1;\n    default:\n      return newValue;\n  }\n};\n\nexport const getLiveNeighbours = ({ x, y }: Cell, board: Board): number =>\n  CONSTANTS.reduce((total, [x1, y1]) => {\n    const max = board.length;\n    return (\n      total +\n      Number(\n        isAlive(\n          board[getNeighbourCoord(x, x1, max)][getNeighbourCoord(y, y1, max)]\n        )\n      )\n    );\n  }, 0);\n","import { Board } from \"types/game\";\nimport { advanceCell } from \"./advanceCell\";\n\nexport const advanceBoard = (board: Board): Board =>\n  board.map((cells) => cells.map((c) => advanceCell(c, board)));\n","import { Cell, Status, Board } from \"types/game\";\nimport { createCell } from \"../create/createCell\";\nimport { getLiveNeighbours } from \"./getLiveNeighbours\";\n\nexport const advanceCell = (cell: Cell, board: Board): Cell => {\n  const liveNeighbours = getLiveNeighbours(cell, board);\n  const { x, y } = cell;\n  if (cell.status === Status.Alive) {\n    switch (true) {\n      case liveNeighbours < 2:\n        return createCell({ x, y, status: Status.Dead });\n      case liveNeighbours > 3:\n        return createCell({ x, y, status: Status.Dead });\n      default:\n        return createCell({ ...cell });\n    }\n  } else {\n    switch (true) {\n      case liveNeighbours === 3:\n        return createCell({ x, y, status: Status.Alive });\n      default:\n        return createCell({ ...cell });\n    }\n  }\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { advanceBoard, createBoard } from \"./logic\";\nimport { GameState } from \"./types\";\n\nexport const initialState: GameState = {\n  board: createBoard(),\n  year: 0,\n};\n\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState,\n  reducers: {\n    advanceGame: ({ board, year }) => ({\n      board: advanceBoard(board),\n      year: year + 1,\n    }),\n  },\n});\nconst { actions, reducer } = gameSlice;\nexport const { advanceGame } = actions;\nexport default reducer;\n","import { Status } from \"types/game\";\nimport getRandomStatus from \"../utils/getRandomStatus\";\nimport { createCell } from \"./createCell\";\n\nexport const createBoard = (size = 8, status?: Status) =>\n  new Array(size)\n    .fill(null)\n    .map((_, x) =>\n      new Array(size)\n        .fill(null)\n        .map((_, y) =>\n          createCell({ x, y, status: status ?? getRandomStatus() })\n        )\n    );\n","import { AppState } from \"store/store\";\n\nexport const gameBoardSelector = (state: AppState) => state.game.board;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { advanceGame } from \"store/game\";\nimport { gameBoardSelector } from \"store/game/selectors\";\nimport { Status } from \"types/game\";\nimport \"./App.css\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const board = useSelector(gameBoardSelector);\n  console.table(\n    board.map((r) => r.map((c) => (c.status === Status.Alive ? 1 : 0)))\n  );\n\n  return <div onClick={() => dispatch(advanceGame())}>advance</div>;\n};\n\nexport default App;\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport gameReducer from \"./game\";\n\nconst reducer = combineReducers({\n  game: gameReducer,\n});\n\nexport type AppState = ReturnType<typeof reducer>;\n\nexport default reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport reducer, { AppState } from \"./reducers\";\n\nconst store = configureStore({\n  reducer,\n  //   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk),\n  devTools: process.env.NODE_ENV !== \"production\",\n});\n\nexport type { AppState };\nexport default store;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./store\";\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}