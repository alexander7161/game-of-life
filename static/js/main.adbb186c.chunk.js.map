{"version":3,"sources":["types/game.ts","store/game/selectors.ts","components/Cell/styles.ts","components/Cell/Cell.tsx","components/Cell/CellWithData.tsx","components/Board/styles.ts","components/Board/Board.tsx","components/Layout/styles.ts","components/Layout/Layout.tsx","components/ControlPanel/GameInformation/styles.ts","components/ControlPanel/GameInformation/GameInformationItem.tsx","components/ControlPanel/GameInformation/GameInformation.tsx","components/ControlPanel/styles.ts","store/game/logic/utils/getRandomStatus.ts","store/game/logic/create/createCell.ts","store/game/logic/create/createBoard.ts","store/game/logic/advance/getLiveNeighbours.ts","store/game/logic/advance/advanceBoard.ts","store/game/logic/advance/advanceCell.ts","store/game/index.ts","components/ControlPanel/ToggleGameButton.tsx","components/ControlPanel/ControlPanel.tsx","App.tsx","store/reducers.ts","store/game/sagas/timer.ts","store/game/sagas/index.ts","store/sagas.ts","store/store.ts","index.tsx"],"names":["Status","selectGameBoard","state","game","board","selectCellStatus","x","y","createSelector","selectCell","status","selectGameActive","active","selectGameBoardSize","size","selectGameInterval","interval","selectGameYear","year","selectAlive","reduce","total","row","totalRow","cell","Alive","CellContainer","styled","div","css","Dead","Cell","CellWithData","useSelector","BoardContainer","RowContainer","Board","Array","fill","map","_","key","LayoutContainer","Layout","children","List","MuiList","GameInformationItem","title","valueSelector","showDivider","value","ListItem","button","ListItemText","primary","Divider","GameInformation","items","Year","Interval","Object","entries","i","keys","length","ControlPanelContainer","getRandomStatus","statuses","Math","floor","random","createCell","Empty","createBoard","CONSTANTS","getNeighbourCoord","x1","max","newValue","getLiveNeighbours","y1","Number","advanceBoard","cells","c","liveNeighbours","advanceCell","initialState","gameSlice","createSlice","name","reducers","startGame","pauseGame","resetGame","payload","newSize","advanceGame","actions","reducer","ToggleGameButton","dispatch","useDispatch","Button","onClick","variant","ControlPanel","App","combineReducers","gameReducer","gameTimer","timer","eventChannel","emitter","timerID","setInterval","clearInterval","select","call","chan","take","put","close","fork","timerTask","cancel","TimerSagas","GameSagas","sagaMiddleware","createSagaMiddleware","store","configureStore","middleware","getDefaultMiddleware","immutableCheck","concat","devTools","undefined","run","sagas","render","document","getElementById"],"mappings":"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","file":"static/js/main.adbb186c.chunk.js","sourcesContent":["export type Board = Cell[][];\n\nexport enum Status {\n  Empty,\n  Alive,\n  Dead,\n}\n\nexport type Cell = {\n  status: Status;\n  x: number;\n  y: number;\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { AppState } from \"store/store\";\nimport { Status } from \"types/game\";\n\nexport const selectGameBoard = (state: AppState) => state.game.board;\n\nexport const selectCell = (x: number, y: number) =>\n  createSelector(selectGameBoard, (board) => board[x][y]);\n\nexport const selectCellStatus = (x: number, y: number) => (state: AppState) =>\n  selectCell(x, y)(state).status;\n\nexport const selectGameActive = (state: AppState) => state.game.active;\n\nexport const selectGameBoardSize = (state: AppState) => state.game.size;\n\nexport const selectGameInterval = (state: AppState) => state.game.interval;\n\nexport const selectGameYear = (state: AppState) => state.game.year;\n\nexport const selectAlive = createSelector(selectGameBoard, (board) =>\n  board.reduce(\n    (total, row) =>\n      total +\n      row.reduce(\n        (totalRow, cell) => totalRow + (cell.status === Status.Alive ? 1 : 0),\n        0\n      ),\n    0\n  )\n);\n","import styled, { css } from \"styled-components\";\nimport { Status } from \"types/game\";\n\nexport const CellContainer = styled.div<{ status: Status }>`\n  height: 10px;\n  width: 10px;\n  ${({ status }) => {\n    switch (status) {\n      case Status.Alive:\n        return css`\n          background-color: green;\n        `;\n      case Status.Dead:\n      default:\n        return css`\n          background-color: white;\n        `;\n    }\n  }}\n`;\n","import React from \"react\";\nimport { CellContainer } from \"./styles\";\nimport { CellProps } from \"./types\";\n\nconst Cell = ({ status }: CellProps) => {\n  return <CellContainer status={status} />;\n};\n\nexport default Cell;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectCellStatus } from \"store/game/selectors\";\nimport { CellWithDataProps } from \"./types\";\nimport Cell from \"./Cell\";\n\nconst CellWithData = ({ x, y }: CellWithDataProps) => {\n  const status = useSelector(selectCellStatus(x, y));\n  return <Cell status={status} />;\n};\n\nexport default CellWithData;\n","import styled from \"styled-components\";\n\nexport const BoardContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  overflow: scroll;\n`;\n\nexport const RowContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport Cell from \"components/Cell\";\nimport { selectGameBoardSize } from \"store/game/selectors\";\n\nimport { BoardContainer, RowContainer } from \"./styles\";\n\nconst Board = () => {\n  const size = useSelector(selectGameBoardSize);\n\n  return (\n    <BoardContainer>\n      {new Array(size).fill(null).map((_, x) => (\n        <RowContainer key={x}>\n          {new Array(size).fill(null).map((_, y) => (\n            <Cell key={`${x}${y}`} x={x} y={y} />\n          ))}\n        </RowContainer>\n      ))}\n    </BoardContainer>\n  );\n};\n\nexport default Board;\n","import styled from \"styled-components\";\n\nexport const LayoutContainer = styled.div`\n  height: 100vh;\n  display: grid;\n\n  // Desktop 2 columns\n  @media (min-width: 801px) {\n    grid-template-columns: 1fr minmax(150px, 25%);\n  }\n\n  // Mobile/Tablet 2 rows\n  @media (max-width: 801px) {\n    grid-template-rows: 1fr minmax(100px, 25%);\n  }\n`;\n","import React, { FC } from \"react\";\nimport { LayoutContainer } from \"./styles\";\n\nconst Layout: FC = ({ children }) => {\n  return <LayoutContainer>{children}</LayoutContainer>;\n};\n\nexport default Layout;\n","import { List as MuiList } from \"@material-ui/core\";\nimport styled from \"styled-components\";\n\nexport const List = styled(MuiList)`\n  && {\n    width: 100%;\n  }\n`;\n","import { Divider, ListItem, ListItemText } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState } from \"store\";\n\nexport const GameInformationItem = ({\n  title,\n  valueSelector,\n  showDivider,\n}: {\n  title: string;\n  valueSelector: (state: AppState) => string | number;\n  showDivider: boolean;\n}) => {\n  const value = useSelector(valueSelector);\n  return (\n    <>\n      <ListItem button>\n        <ListItemText primary={`${title}: ${value}`} />\n      </ListItem>\n      {showDivider && <Divider />}\n    </>\n  );\n};\n\nexport default GameInformationItem;\n","import React from \"react\";\n\nimport {\n  selectAlive,\n  selectGameInterval,\n  selectGameYear,\n} from \"store/game/selectors\";\n\nimport { List } from \"./styles\";\nimport GameInformationItem from \"./GameInformationItem\";\n\nconst GameInformation = () => {\n  const items = {\n    Year: selectGameYear,\n    Alive: selectAlive,\n    Interval: selectGameInterval,\n  };\n  return (\n    <List>\n      {Object.entries(items).map(([title, valueSelector], i) => (\n        <GameInformationItem\n          key={title}\n          title={title}\n          valueSelector={valueSelector}\n          showDivider={i !== Object.keys(items).length - 1}\n        />\n      ))}\n    </List>\n  );\n};\n\nexport default GameInformation;\n","import styled from \"styled-components\";\n\nexport const ControlPanelContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n`;\n","import { Status } from \"types/game\";\n\nconst getRandomStatus = (statuses: Status[]) => {\n  return statuses[Math.floor(Math.random() * statuses.length)] as Status;\n};\n\nexport default getRandomStatus;\n","import { Status, Cell } from \"types/game\";\n\nexport const createCell = ({\n  x,\n  y,\n  status = Status.Empty,\n}: {\n  x: number;\n  y: number;\n  status?: Status;\n}): Cell => ({\n  x,\n  y,\n  status,\n});\n","import { Status } from \"types/game\";\nimport getRandomStatus from \"../utils/getRandomStatus\";\nimport { createCell } from \"./createCell\";\n\nexport const createBoard = (size = 8, status?: Status) =>\n  new Array(size)\n    .fill(null)\n    .map((_, x) =>\n      new Array(size)\n        .fill(null)\n        .map((_, y) =>\n          createCell({\n            x,\n            y,\n            status: status ?? getRandomStatus([Status.Alive, Status.Empty]),\n          })\n        )\n    );\n","import { Cell, Status, Board } from \"types/game\";\n\nconst CONSTANTS = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, -1],\n  [0, 1],\n  [1, 0],\n  [1, 1],\n  [1, -1],\n];\n\nconst isAlive = (cell: Cell): boolean => cell.status === Status.Alive;\n\nconst getNeighbourCoord = (x: number, x1: number, max: number) => {\n  const newValue = x + x1;\n  switch (true) {\n    case newValue === max:\n      return 0;\n    case newValue < 0:\n      return max - 1;\n    default:\n      return newValue;\n  }\n};\n\nexport const getLiveNeighbours = ({ x, y }: Cell, board: Board): number =>\n  CONSTANTS.reduce((total, [x1, y1]) => {\n    const max = board.length;\n    return (\n      total +\n      Number(\n        isAlive(\n          board[getNeighbourCoord(x, x1, max)][getNeighbourCoord(y, y1, max)]\n        )\n      )\n    );\n  }, 0);\n","import { Board } from \"types/game\";\nimport { advanceCell } from \"./advanceCell\";\n\nexport const advanceBoard = (board: Board): Board =>\n  board.map((cells) => cells.map((c) => advanceCell(c, board)));\n","import { Cell, Status, Board } from \"types/game\";\nimport { createCell } from \"../create/createCell\";\nimport { getLiveNeighbours } from \"./getLiveNeighbours\";\n\nexport const advanceCell = (cell: Cell, board: Board): Cell => {\n  const liveNeighbours = getLiveNeighbours(cell, board);\n  const { x, y } = cell;\n  if (cell.status === Status.Alive) {\n    switch (true) {\n      case liveNeighbours < 2:\n        return createCell({ x, y, status: Status.Dead });\n      case liveNeighbours > 3:\n        return createCell({ x, y, status: Status.Dead });\n      default:\n        return createCell({ ...cell });\n    }\n  } else {\n    switch (true) {\n      case liveNeighbours === 3:\n        return createCell({ x, y, status: Status.Alive });\n      default:\n        return createCell({ ...cell });\n    }\n  }\n};\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { advanceBoard, createBoard } from \"./logic\";\nimport { GameState } from \"./types\";\n\nconst INITIAL_SIZE = 75;\nconst INITIAL_INTERVAL = 4;\n\nexport const initialState: GameState = {\n  active: false,\n  board: createBoard(INITIAL_SIZE),\n  year: 0,\n  size: INITIAL_SIZE,\n  interval: INITIAL_INTERVAL,\n};\n\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState,\n  reducers: {\n    startGame(state) {\n      state.active = true;\n    },\n    pauseGame(state) {\n      state.active = false;\n    },\n    resetGame(state, { payload }: PayloadAction<{ size: number } | undefined>) {\n      const newSize = payload?.size ?? state.size;\n      state.board = createBoard(newSize);\n      state.size = newSize;\n    },\n    advanceGame(state) {\n      const { board } = state;\n      state.board = advanceBoard(board);\n      state.year++;\n    },\n  },\n});\nconst { actions, reducer } = gameSlice;\nexport const { advanceGame, startGame, pauseGame } = actions;\nexport default reducer;\n","import React from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { pauseGame, startGame } from \"store/game\";\nimport { selectGameActive } from \"store/game/selectors\";\n\nconst ToggleGameButton = () => {\n  const dispatch = useDispatch();\n  const active = useSelector(selectGameActive);\n\n  return (\n    <Button\n      onClick={() => dispatch(active ? pauseGame() : startGame())}\n      size=\"large\"\n      variant=\"contained\"\n    >\n      {active ? \"Pause\" : \"Start\"}\n    </Button>\n  );\n};\n\nexport default ToggleGameButton;\n","import React from \"react\";\n\nimport GameInformation from \"./GameInformation\";\nimport { ControlPanelContainer } from \"./styles\";\nimport ToggleGameButton from \"./ToggleGameButton\";\n\nconst ControlPanel = () => {\n  return (\n    <ControlPanelContainer>\n      <GameInformation />\n      <ToggleGameButton />\n    </ControlPanelContainer>\n  );\n};\n\nexport default ControlPanel;\n","import React from \"react\";\n\nimport Board from \"components/Board\";\nimport Layout from \"components/Layout\";\nimport ControlPanel from \"components/ControlPanel\";\n\nconst App = () => {\n  return (\n    <Layout>\n      <Board />\n      <ControlPanel />\n    </Layout>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport gameReducer from \"./game\";\n\nconst reducer = combineReducers({\n  game: gameReducer,\n});\n\nexport type AppState = ReturnType<typeof reducer>;\n\nexport default reducer;\n","import { eventChannel } from \"redux-saga\";\nimport { call, cancel, fork, put, select, take } from \"redux-saga/effects\";\nimport { advanceGame, startGame, pauseGame } from \"..\";\nimport { selectGameInterval } from \"../selectors\";\n\nfunction timer(interval: number) {\n  return eventChannel((emitter) => {\n    const timerID = setInterval(() => emitter(\"\"), interval);\n    return () => {\n      clearInterval(timerID);\n    };\n  });\n}\n\nexport function* gameTimer() {\n  const interval = yield select(selectGameInterval);\n  const chan = yield call(timer, interval);\n  try {\n    while (true) {\n      yield take(chan);\n      yield put(advanceGame());\n    }\n  } finally {\n    chan.close();\n  }\n}\n\nexport default function* () {\n  while (yield take(startGame)) {\n    const timerTask = yield fork(gameTimer);\n    yield take(pauseGame);\n    yield cancel(timerTask);\n  }\n}\n","import { fork } from \"redux-saga/effects\";\nimport TimerSagas from \"./timer\";\n\nexport default function* () {\n  yield fork(TimerSagas);\n}\n","import { fork } from \"redux-saga/effects\";\n\nimport GameSagas from \"./game/sagas\";\n\nexport default function* () {\n  yield fork(GameSagas);\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport reducer, { AppState } from \"./reducers\";\nimport sagas from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({ immutableCheck: false }).concat(sagaMiddleware),\n  devTools:\n    process.env.NODE_ENV !== \"production\"\n      ? { actionsBlacklist: [\"game/advanceGame\"] }\n      : undefined,\n});\n\nsagaMiddleware.run(sagas);\n\nexport type { AppState };\nexport default store;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"normalize.css\";\n\nimport App from \"./App\";\nimport store from \"./store\";\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}