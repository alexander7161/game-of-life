{"version":3,"sources":["types/game.ts","store/game/selectors.ts","components/Cell/styles.ts","components/Cell/Cell.tsx","components/Board/styles.ts","components/Board/Board.tsx","store/game/logic/utils/getRandomStatus.ts","store/game/logic/create/createCell.ts","store/game/logic/advance/getLiveNeighbours.ts","store/game/logic/advance/advanceBoard.ts","store/game/logic/advance/advanceCell.ts","store/game/index.ts","store/game/logic/create/createBoard.ts","App.tsx","store/reducers.ts","store/store.ts","index.tsx"],"names":["Status","gameBoardSelector","state","game","board","selectCellStatus","x","y","createSelector","selectCell","status","CellContainer","styled","div","Alive","css","Dead","Cell","useSelector","BoardContainer","RowContainer","Board","Array","fill","map","_","key","getRandomStatus","statuses","Math","floor","random","length","createCell","Empty","CONSTANTS","getNeighbourCoord","x1","max","newValue","getLiveNeighbours","reduce","total","y1","Number","advanceBoard","cells","c","cell","liveNeighbours","advanceCell","initialState","size","createBoard","year","gameSlice","createSlice","name","reducers","advanceGame","actions","reducer","App","dispatch","useDispatch","onClick","combineReducers","gameReducer","store","configureStore","devTools","process","render","document","getElementById"],"mappings":"kKAEYA,E,qCCCCC,EAAoB,SAACC,GAAD,OAAqBA,EAAMC,KAAKC,OAKpDC,EAAmB,SAACC,EAAWC,GAAZ,OAA0B,SAACL,GAAD,OAHhC,SAACI,EAAWC,GAAZ,OACxBC,YAAeP,GAAmB,SAACG,GAAD,OAAWA,EAAME,GAAGC,MAGtDE,CAAWH,EAAGC,EAAdE,CAAiBP,GAAOQ,S,6WDPdV,O,iBAAAA,I,iBAAAA,I,gBAAAA,M,KECL,IAAMW,EAAgBC,IAAOC,IAAV,KAGtB,YACA,OADgB,EAAbH,QAED,KAAKV,EAAOc,MACV,OAAOC,YAAP,KAGF,KAAKf,EAAOgB,KACZ,QACE,OAAOD,YAAP,SCHOE,EALF,SAAC,GAAyB,IAAvBX,EAAsB,EAAtBA,EAAGC,EAAmB,EAAnBA,EACXG,EAASQ,YAAYb,EAAiBC,EAAGC,IAC/C,OAAO,kBAACI,EAAD,CAAeD,OAAQA,K,sLCNzB,IAAMS,EAAiBP,IAAOC,IAAV,KAEdO,EAAeR,IAAOC,IAAV,KCYVQ,EAZD,kBACZ,kBAACF,EAAD,KACG,IAAIG,MAAM,IAAIC,KAAK,MAAMC,KAAI,SAACC,EAAGnB,GAAJ,OAC5B,kBAACc,EAAD,CAAcM,IAAKpB,GAChB,IAAIgB,MAAM,IAAIC,KAAK,MAAMC,KAAI,SAACC,EAAGlB,GAAJ,OAC5B,kBAAC,EAAD,CAAMmB,IAAG,UAAKpB,GAAL,OAASC,GAAKD,EAAGA,EAAGC,EAAGA,a,OCH3BoB,EAJS,SAACC,GACvB,OAAOA,EAASC,KAAKC,MAAMD,KAAKE,SAAWH,EAASI,UCDzCC,EAAa,SAAC,GAAD,IACxB3B,EADwB,EACxBA,EACAC,EAFwB,EAExBA,EAFwB,IAGxBG,OAHwB,MAQb,CACXJ,IACAC,IACAG,YAXwB,MAGfV,EAAOkC,MAHQ,I,gBCApBC,EAAY,CAChB,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,IAKDC,EAAoB,SAAC9B,EAAW+B,EAAYC,GAChD,IAAMC,EAAWjC,EAAI+B,EACrB,QAAQ,GACN,KAAKE,IAAaD,EAChB,OAAO,EACT,KAAKC,EAAW,EACd,OAAOD,EAAM,EACf,QACE,OAAOC,IAIAC,EAAoB,SAAC,EAAgBpC,GAAjB,IAAGE,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAN,OAC/B4B,EAAUM,QAAO,SAACC,EAAD,GAAsB,IAAD,mBAAZL,EAAY,KAARM,EAAQ,KAC9BL,EAAMlC,EAAM4B,OAClB,OACEU,EACAE,OAEIxC,EAAMgC,EAAkB9B,EAAG+B,EAAIC,IAAMF,EAAkB7B,EAAGoC,EAAIL,IArB1B5B,SAAWV,EAAOc,SAyB3D,ICnCQ+B,EAAe,SAACzC,GAAD,OAC1BA,EAAMoB,KAAI,SAACsB,GAAD,OAAWA,EAAMtB,KAAI,SAACuB,GAAD,OCAN,SAACC,EAAY5C,GACtC,IAAM6C,EAAiBT,EAAkBQ,EAAM5C,GACvCE,EAAS0C,EAAT1C,EAAGC,EAAMyC,EAANzC,EACX,GAAIyC,EAAKtC,SAAWV,EAAOc,MACzB,QAAQ,GACN,KAAKmC,EAAiB,EAEtB,KAAKA,EAAiB,EACpB,OAAOhB,EAAW,CAAE3B,IAAGC,IAAGG,OAAQV,EAAOgB,OAC3C,QACE,OAAOiB,EAAW,eAAKe,SAG3B,QAAQ,GACN,KAAwB,IAAnBC,EACH,OAAOhB,EAAW,CAAE3B,IAAGC,IAAGG,OAAQV,EAAOc,QAC3C,QACE,OAAOmB,EAAW,eAAKe,KDjBSE,CAAYH,EAAG3C,UEA1C+C,EAA0B,CACrC/C,MCDyB,eAACgD,EAAD,uDAAQ,EAAG1C,EAAX,8CACzB,IAAIY,MAAM8B,GACP7B,KAAK,MACLC,KAAI,SAACC,EAAGnB,GAAJ,OACH,IAAIgB,MAAM8B,GACP7B,KAAK,MACLC,KAAI,SAACC,EAAGlB,GAAJ,OACH0B,EAAW,CACT3B,IACAC,IACAG,OAAM,OAAEA,QAAF,IAAEA,IAAUiB,EAAgB,CAAC3B,EAAOc,MAAOd,EAAOkC,gBDT3DmB,CAAY,IACnBC,KAAM,GAGFC,EAAYC,YAAY,CAC5BC,KAAM,OACNN,eACAO,SAAU,CACRC,YAAa,gBAAGvD,EAAH,EAAGA,MAAOkD,EAAV,EAAUA,KAAV,MAAsB,CACjClD,MAAOyC,EAAazC,GACpBkD,KAAMA,EAAO,OAIXM,EAAqBL,EAArBK,QAASC,EAAYN,EAAZM,QACFF,EAAgBC,EAAhBD,YACAE,IENAC,EAVH,WACV,IAAMC,EAAWC,cACjB,OACE,oCACE,yBAAKC,QAAS,kBAAMF,EAASJ,OAA7B,WADF,IAEE,kBAAC,EAAD,Q,OCASE,EANCK,YAAgB,CAC9B/D,KAAMgE,ICMOC,EAPDC,YAAe,CAC3BR,UAEAS,UAAUC,I,MCAZC,iBACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,W","file":"static/js/main.4464a823.chunk.js","sourcesContent":["export type Board = Cell[][];\n\nexport enum Status {\n  Empty,\n  Alive,\n  Dead,\n}\n\nexport type Cell = {\n  status: Status;\n  x: number;\n  y: number;\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\nimport { AppState } from \"store/store\";\n\nexport const gameBoardSelector = (state: AppState) => state.game.board;\n\nexport const selectCell = (x: number, y: number) =>\n  createSelector(gameBoardSelector, (board) => board[x][y]);\n\nexport const selectCellStatus = (x: number, y: number) => (state: AppState) =>\n  selectCell(x, y)(state).status;\n","import styled, { css } from \"styled-components\";\nimport { Status } from \"types/game\";\n\nexport const CellContainer = styled.div<{ status: Status }>`\n  height: 10px;\n  width: 10px;\n  ${({ status }) => {\n    switch (status) {\n      case Status.Alive:\n        return css`\n          background-color: green;\n        `;\n      case Status.Dead:\n      default:\n        return css`\n          background-color: white;\n        `;\n    }\n  }}\n`;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { selectCellStatus } from \"store/game/selectors\";\nimport { CellContainer } from \"./styles\";\nimport { CellProps } from \"./types\";\n\nconst Cell = ({ x, y }: CellProps) => {\n  const status = useSelector(selectCellStatus(x, y));\n  return <CellContainer status={status} />;\n};\n\nexport default Cell;\n","import styled from \"styled-components\";\n\nexport const BoardContainer = styled.div``;\n\nexport const RowContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n","import Cell from \"components/Cell\";\nimport React from \"react\";\nimport { BoardContainer, RowContainer } from \"./styles\";\n\nconst Board = () => (\n  <BoardContainer>\n    {new Array(50).fill(null).map((_, x) => (\n      <RowContainer key={x}>\n        {new Array(50).fill(null).map((_, y) => (\n          <Cell key={`${x}${y}`} x={x} y={y} />\n        ))}\n      </RowContainer>\n    ))}\n  </BoardContainer>\n);\n\nexport default Board;\n","import { Status } from \"types/game\";\n\nconst getRandomStatus = (statuses: Status[]) => {\n  return statuses[Math.floor(Math.random() * statuses.length)] as Status;\n};\n\nexport default getRandomStatus;\n","import { Status, Cell } from \"types/game\";\n\nexport const createCell = ({\n  x,\n  y,\n  status = Status.Empty,\n}: {\n  x: number;\n  y: number;\n  status?: Status;\n}): Cell => ({\n  x,\n  y,\n  status,\n});\n","import { Cell, Status, Board } from \"types/game\";\n\nconst CONSTANTS = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, -1],\n  [0, 1],\n  [1, 0],\n  [1, 1],\n  [1, -1],\n];\n\nconst isAlive = (cell: Cell): boolean => cell.status === Status.Alive;\n\nconst getNeighbourCoord = (x: number, x1: number, max: number) => {\n  const newValue = x + x1;\n  switch (true) {\n    case newValue === max:\n      return 0;\n    case newValue < 0:\n      return max - 1;\n    default:\n      return newValue;\n  }\n};\n\nexport const getLiveNeighbours = ({ x, y }: Cell, board: Board): number =>\n  CONSTANTS.reduce((total, [x1, y1]) => {\n    const max = board.length;\n    return (\n      total +\n      Number(\n        isAlive(\n          board[getNeighbourCoord(x, x1, max)][getNeighbourCoord(y, y1, max)]\n        )\n      )\n    );\n  }, 0);\n","import { Board } from \"types/game\";\nimport { advanceCell } from \"./advanceCell\";\n\nexport const advanceBoard = (board: Board): Board =>\n  board.map((cells) => cells.map((c) => advanceCell(c, board)));\n","import { Cell, Status, Board } from \"types/game\";\nimport { createCell } from \"../create/createCell\";\nimport { getLiveNeighbours } from \"./getLiveNeighbours\";\n\nexport const advanceCell = (cell: Cell, board: Board): Cell => {\n  const liveNeighbours = getLiveNeighbours(cell, board);\n  const { x, y } = cell;\n  if (cell.status === Status.Alive) {\n    switch (true) {\n      case liveNeighbours < 2:\n        return createCell({ x, y, status: Status.Dead });\n      case liveNeighbours > 3:\n        return createCell({ x, y, status: Status.Dead });\n      default:\n        return createCell({ ...cell });\n    }\n  } else {\n    switch (true) {\n      case liveNeighbours === 3:\n        return createCell({ x, y, status: Status.Alive });\n      default:\n        return createCell({ ...cell });\n    }\n  }\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { advanceBoard, createBoard } from \"./logic\";\nimport { GameState } from \"./types\";\n\nexport const initialState: GameState = {\n  board: createBoard(50),\n  year: 0,\n};\n\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState,\n  reducers: {\n    advanceGame: ({ board, year }) => ({\n      board: advanceBoard(board),\n      year: year + 1,\n    }),\n  },\n});\nconst { actions, reducer } = gameSlice;\nexport const { advanceGame } = actions;\nexport default reducer;\n","import { Status } from \"types/game\";\nimport getRandomStatus from \"../utils/getRandomStatus\";\nimport { createCell } from \"./createCell\";\n\nexport const createBoard = (size = 8, status?: Status) =>\n  new Array(size)\n    .fill(null)\n    .map((_, x) =>\n      new Array(size)\n        .fill(null)\n        .map((_, y) =>\n          createCell({\n            x,\n            y,\n            status: status ?? getRandomStatus([Status.Alive, Status.Empty]),\n          })\n        )\n    );\n","import Board from \"components/Board\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { advanceGame } from \"store/game\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <div onClick={() => dispatch(advanceGame())}>advance</div>;\n      <Board />\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport gameReducer from \"./game\";\n\nconst reducer = combineReducers({\n  game: gameReducer,\n});\n\nexport type AppState = ReturnType<typeof reducer>;\n\nexport default reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport reducer, { AppState } from \"./reducers\";\n\nconst store = configureStore({\n  reducer,\n  //   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk),\n  devTools: process.env.NODE_ENV !== \"production\",\n});\n\nexport type { AppState };\nexport default store;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport \"normalize.css\";\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}