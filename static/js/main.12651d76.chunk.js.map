{"version":3,"sources":["types/game.ts","components/Cell/styles.ts","components/Cell/Cell.tsx","store/game/logic/utils/getRandomStatus.ts","store/game/logic/create/createCell.ts","store/game/logic/advance/getLiveNeighbours.ts","store/game/logic/advance/advanceBoard.ts","store/game/logic/advance/advanceCell.ts","store/game/index.ts","store/game/logic/create/createBoard.ts","store/game/selectors.ts","App.tsx","store/reducers.ts","store/store.ts","index.tsx"],"names":["Status","CellContainer","styled","div","status","Alive","css","Dead","Cell","cell","getRandomStatus","statuses","Math","floor","random","length","createCell","x","y","Empty","CONSTANTS","getNeighbourCoord","x1","max","newValue","getLiveNeighbours","board","reduce","total","y1","Number","advanceBoard","map","cells","c","liveNeighbours","advanceCell","initialState","size","Array","fill","_","createBoard","year","gameSlice","createSlice","name","reducers","advanceGame","actions","reducer","gameBoardSelector","state","game","App","dispatch","useDispatch","useSelector","onClick","r","i","key","style","display","flexDirection","combineReducers","gameReducer","store","configureStore","devTools","process","render","document","getElementById"],"mappings":"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","file":"static/js/main.12651d76.chunk.js","sourcesContent":["export type Board = Cell[][];\n\nexport enum Status {\n  Empty,\n  Alive,\n  Dead,\n}\n\nexport type Cell = {\n  status: Status;\n  x: number;\n  y: number;\n};\n","import styled, { css } from \"styled-components\";\nimport { Status } from \"types/game\";\n\nexport const CellContainer = styled.div<{ status: Status }>`\n  height: 10px;\n  width: 10px;\n  ${({ status }) => {\n    switch (status) {\n      case Status.Alive:\n        return css`\n          background-color: green;\n        `;\n      case Status.Dead:\n      default:\n        return css`\n          background-color: white;\n        `;\n    }\n  }}\n`;\n","import React from \"react\";\nimport { CellContainer } from \"./styles\";\nimport { CellProps } from \"./types\";\n\nconst Cell = ({ cell: { status } }: CellProps) => (\n  <CellContainer status={status} />\n);\n\nexport default Cell;\n","import { Status } from \"types/game\";\n\nconst getRandomStatus = (statuses: Status[]) => {\n  return statuses[Math.floor(Math.random() * statuses.length)] as Status;\n};\n\nexport default getRandomStatus;\n","import { Status, Cell } from \"types/game\";\n\nexport const createCell = ({\n  x,\n  y,\n  status = Status.Empty,\n}: {\n  x: number;\n  y: number;\n  status?: Status;\n}): Cell => ({\n  x,\n  y,\n  status,\n});\n","import { Cell, Status, Board } from \"types/game\";\n\nconst CONSTANTS = [\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, -1],\n  [0, 1],\n  [1, 0],\n  [1, 1],\n  [1, -1],\n];\n\nconst isAlive = (cell: Cell): boolean => cell.status === Status.Alive;\n\nconst getNeighbourCoord = (x: number, x1: number, max: number) => {\n  const newValue = x + x1;\n  switch (true) {\n    case newValue === max:\n      return 0;\n    case newValue < 0:\n      return max - 1;\n    default:\n      return newValue;\n  }\n};\n\nexport const getLiveNeighbours = ({ x, y }: Cell, board: Board): number =>\n  CONSTANTS.reduce((total, [x1, y1]) => {\n    const max = board.length;\n    return (\n      total +\n      Number(\n        isAlive(\n          board[getNeighbourCoord(x, x1, max)][getNeighbourCoord(y, y1, max)]\n        )\n      )\n    );\n  }, 0);\n","import { Board } from \"types/game\";\nimport { advanceCell } from \"./advanceCell\";\n\nexport const advanceBoard = (board: Board): Board =>\n  board.map((cells) => cells.map((c) => advanceCell(c, board)));\n","import { Cell, Status, Board } from \"types/game\";\nimport { createCell } from \"../create/createCell\";\nimport { getLiveNeighbours } from \"./getLiveNeighbours\";\n\nexport const advanceCell = (cell: Cell, board: Board): Cell => {\n  const liveNeighbours = getLiveNeighbours(cell, board);\n  const { x, y } = cell;\n  if (cell.status === Status.Alive) {\n    switch (true) {\n      case liveNeighbours < 2:\n        return createCell({ x, y, status: Status.Dead });\n      case liveNeighbours > 3:\n        return createCell({ x, y, status: Status.Dead });\n      default:\n        return createCell({ ...cell });\n    }\n  } else {\n    switch (true) {\n      case liveNeighbours === 3:\n        return createCell({ x, y, status: Status.Alive });\n      default:\n        return createCell({ ...cell });\n    }\n  }\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { advanceBoard, createBoard } from \"./logic\";\nimport { GameState } from \"./types\";\n\nexport const initialState: GameState = {\n  board: createBoard(50),\n  year: 0,\n};\n\nconst gameSlice = createSlice({\n  name: \"game\",\n  initialState,\n  reducers: {\n    advanceGame: ({ board, year }) => ({\n      board: advanceBoard(board),\n      year: year + 1,\n    }),\n  },\n});\nconst { actions, reducer } = gameSlice;\nexport const { advanceGame } = actions;\nexport default reducer;\n","import { Status } from \"types/game\";\nimport getRandomStatus from \"../utils/getRandomStatus\";\nimport { createCell } from \"./createCell\";\n\nexport const createBoard = (size = 8, status?: Status) =>\n  new Array(size)\n    .fill(null)\n    .map((_, x) =>\n      new Array(size)\n        .fill(null)\n        .map((_, y) =>\n          createCell({\n            x,\n            y,\n            status: status ?? getRandomStatus([Status.Alive, Status.Empty]),\n          })\n        )\n    );\n","import { AppState } from \"store/store\";\n\nexport const gameBoardSelector = (state: AppState) => state.game.board;\n","import Cell from \"components/Cell\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { advanceGame } from \"store/game\";\nimport { gameBoardSelector } from \"store/game/selectors\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const board = useSelector(gameBoardSelector);\n\n  return (\n    <>\n      <div onClick={() => dispatch(advanceGame())}>advance</div>\n      {board.map((r, i) => (\n        <div key={i} style={{ display: \"flex\", flexDirection: \"row\" }}>\n          {r.map((c) => (\n            <Cell key={`${c.x}${c.y}`} cell={c} />\n          ))}\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"@reduxjs/toolkit\";\n\nimport gameReducer from \"./game\";\n\nconst reducer = combineReducers({\n  game: gameReducer,\n});\n\nexport type AppState = ReturnType<typeof reducer>;\n\nexport default reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport reducer, { AppState } from \"./reducers\";\n\nconst store = configureStore({\n  reducer,\n  //   middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk),\n  devTools: process.env.NODE_ENV !== \"production\",\n});\n\nexport type { AppState };\nexport default store;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport \"normalize.css\";\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}